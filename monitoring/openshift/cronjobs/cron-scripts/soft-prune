#!/usr/bin/env bash
# Exit on error. Append "|| true" if you expect an error.
set -o errexit
# Exit on error inside any functions or subshells.
set -o errtrace
# Do not allow use of undefined vars. Use ${VAR:-} to use an undefined VAR
set -o nounset
# Catch the error in case mysqldump fails (but gzip succeeds) in `mysqldump |gzip`
set -o pipefail
# Turn on traces, useful while debugging but commented out by default
# set -o xtrace

# Safely exit if timed out
function safe_exit () {
  trap '' INT TERM # ignore INT and TERM while shutting down
  # Turn off all the safeties
  set +o errexit
  set +o errtrace
  set +o nounset
  set +o pipefail
  echo "Trapped SIGTERM in script and cleaning up"
  kill -TERM $BG_PID # Kill backgrounded script
  wait $BG_PID # Wait for it to exit
  exit 1
}

trap safe_exit SIGTERM

timestamp() { date +"%Y-%m-%d %H:%M:%S %Z"; }
PRUNE_OPTIONS="--keep-younger-than=96h --loglevel=4"

## Build Prune
echo "$(timestamp): oc adm prune builds --orphans ${PRUNE_OPTIONS}"
oc adm prune builds --orphans ${PRUNE_OPTIONS} &
BG_PID=`jobs -p`
wait $BG_PID
rc=$?
if [ $rc -ne 0 ] ; then
  echo "$(timestamp): Dry-Run Build prune failed, skipping builds prune..."
  exit 1
fi

echo "$(timestamp) oc adm prune builds --orphans ${PRUNE_OPTIONS} --confirm"
oc adm prune builds --orphans ${PRUNE_OPTIONS} --confirm &
BG_PID=`jobs -p`
wait $BG_PID
rc=$?
if [ $rc -ne 0 ] ; then
  echo "$(timestamp): Build prune failed."
  exit $rc
fi

## Deployment Prune
echo "$(timestamp): oc adm prune deployments --orphans ${PRUNE_OPTIONS}"
oc adm prune deployments --orphans ${PRUNE_OPTIONS} &
BG_PID=`jobs -p`
wait $BG_PID
rc=$?
if [ $rc -ne 0 ] ; then
  echo "$(timestamp): Dry-Run deployments prune failed, skipping deployments prune..."
  exit $rc
fi

echo "$(timestamp) oc adm prune deployments --orphans ${PRUNE_OPTIONS} --confirm"
oc adm prune deployments --orphans ${PRUNE_OPTIONS} --confirm &
BG_PID=`jobs -p`
wait $BG_PID
rc=$?
if [ $rc -ne 0 ] ; then
  echo "$(timestamp): Deployment prune failed."
  exit $rc
fi

## Image Prune
echo "$(timestamp): oc adm prune images ${PRUNE_OPTIONS}"
oc adm prune images --force-insecure ${PRUNE_OPTIONS} &
BG_PID=`jobs -p`
wait $BG_PID
rc=$?
if [ $rc -ne 0 ] ; then
  echo "$(timestamp): Dry-Run Prune failed, aborting..."
  exit $rc
fi

echo "$(timestamp) oc adm prune images ${PRUNE_OPTIONS} --confirm"
oc adm prune images --force-insecure ${PRUNE_OPTIONS} --confirm &
BG_PID=`jobs -p`
wait $BG_PID
rc=$?
if [ $rc -ne 0 ] ; then
  echo "$(timestamp): Prune failed, aborting..."
  exit $rc;
fi

echo $(timestamp)

oc rollout latest dc/docker-registry -n default
oc rollout status dc/docker-registry -n default &
BG_PID=`jobs -p`
wait $BG_PID
rc=$?

echo $(timestamp)

exit $rc
