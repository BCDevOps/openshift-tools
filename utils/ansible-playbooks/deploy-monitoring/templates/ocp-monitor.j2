#!/usr/bin/env bash

# Exit on error. Append "|| true" if you expect an error.
set -o errexit
# Exit on error inside any functions or subshells.
set -o errtrace
# Do not allow use of undefined vars. Use ${VAR:-} to use an undefined VAR
set -o nounset
# Catch the error in case mysqldump fails (but gzip succeeds) in `mysqldump |gzip`
set -o pipefail
# Turn on traces, useful while debugging but commented out by default
# set -o xtrace

# Print a backtrace on error
# https://github.com/ab/bin/blob/master/bash-backtrace.sh
{% raw %}
bash_backtrace() {
    # Return value of command that caused error
    local RET=$?
    # Frame counter
    local I=0
    # backtrace layers
    local FRAMES=${#BASH_SOURCE[@]}

    # Restore STDOUT and STDERR as they might be in unknown states due to catching
    # an error in the middle of a command
    exec 1>&3 2>&4

    echo "Traceback (most recent call last):"

    for ((FRAME=FRAMES-2; FRAME >= 0; FRAME--)); do
        local LINENO=${BASH_LINENO[FRAME]}

        # Location of error
        echo "  File ${BASH_SOURCE[FRAME+1]}, line ${LINENO}, in ${FUNCNAME[FRAME+1]}"

        # Print the error line, with preceding whitespace removed
        echo "$(sed -n "${LINENO}s/^[   ]*/    /p" "${BASH_SOURCE[FRAME+1]}")"
    done

    echo "Exiting with status ${RET}"
    exit "${RET}"
}
{% endraw %}
# Copy STDOUT and STDERR so they can be restored later
exec 3>&1 4>&2
# Trap script errors and print some helpful debug info
trap bash_backtrace ERR

# Standardize the date stamps output
function datestamp () {
  date "+%F %H:%M:%S"
}

{% if ansible_fqdn == "ociopf-d-100.dmz" %}
{% raw %}
# Test that the API is responding
echo -n "$(datestamp) OpenShift API Status: "
if ! curl -s https://console.pathfinder.gov.bc.ca:8443/healthz | grep ok
then
  echo "$(datestamp) ERROR: curl of API https://console.pathfinder.gov.bc.ca:8443/healthz failed"
fi

# Test that the Router service is responding
# TODO switch to DNS name once server are using dnsmasq properly
echo -n "$(datestamp) OpenShift Router Status: "
if ! curl -s http://172.50.56.219:1936/healthz | grep 'Service ready'
then
  echo "$(datestamp) ERROR: curl of router service http://172.50.56.219:1936/healthz failed"
fi

# Test that a sample route is working
echo -n "$(datestamp) BCDevExchange Status: "
if ! curl -Isk https://bcdevexchange.org/ | grep '200 OK'
then
  echo "$(datestamp) ERROR: curl of https://bcdevexchange.org/ failed"
fi

# Test the Docker Registry is responding
# TOD switch to DNS name once server is using dnsmasq properly
echo -n "$(datestamp) Docker Registry Status: "
if ! curl -Is http://172.50.0.2:5000/healthz | grep '200 OK'
then
  echo "$(datestamp) ERROR: curl of docker registry service http://172.50.0.2:5000/healthz failed"
fi

# Run provided metrics health check
# Find the dir we are running in
DIR=$(dirname $(readlink -f "$0"))
echo -n "$(datestamp) Metrics status: "
if ! /usr/local/bin/metrics-health-check https://hawkular-metrics.pathfinder.gov.bc.ca
then
  echo "$(datestamp) ERROR: Metrics health check failed"
fi

# Check disk space of Registry
echo -n "$(datestamp) Registry disk usage: "
POD=$(oc -n default get pods -l deploymentconfig=docker-registry -o name | sed 's#pods/##' | head -n 1)
SPACE=$(oc -n default exec $POD -- sh -c 'echo "$(df /registry | awk '\''/registry/ {print $5}'\'' | tr -d "%")"')
echo "$(echo 100 '-' $SPACE | bc -l)% free"
FREE=$(echo 100 '-' $SPACE '>' 15 | bc -l)
if [ "$FREE" -lt 1 ]
then
  echo "$(datestamp) ERROR: Low Docker Registry Space"
fi

# Check disk space of Metrics Cassandra
echo -n "$(datestamp) Metrics disk usage: "
POD=$(oc -n openshift-infra get pods -l type=hawkular-cassandra -o name | sed 's#pods/##' | head -n 1)
SPACE=$(oc -n openshift-infra exec $POD -- sh -c 'echo "$(df /cassandra_data | awk '\''/cassandra_data/ {print $5}'\'' | tr -d "%")"')
echo "$(echo 100 '-' $SPACE | bc -l)% free"
FREE=$(echo 100 '-' $SPACE '>' 15 | bc -l)
if [ "$FREE" -lt 1 ]
then
  echo "$(datestamp) ERROR: Low Metrics Cassandra Space"
fi

# Check that all nodes are Ready
echo "$(datestamp) Check for NodeNotReady"
if oc get nodes -o go-template="{{range .items}}{{.metadata.name}}{{print \"\t\"}}{{range .status.conditions}}{{if eq .type \"Ready\"}}{{.status}}{{end}}{{end}}{{print \"\n\"}}{{end}}" | grep -v True
then
  echo "$(datestamp) ERROR: Some nodes are not Ready"
else
  NODES=$(oc get nodes -o go-template="{{range .items}}{{.metadata.name}}{{print \"\t\"}}{{range .status.conditions}}{{if eq .type \"Ready\"}}{{.status}}{{end}}{{end}}{{print \"\n\"}}{{end}}"|wc -l)
  echo "$(datestamp) INFO: $NODES nodes online and ready"
fi

# Verify the Registry is on 3 nodes
NODES=$(oc -n default get pods -l deploymentconfig=docker-registry -o yaml -o go-template="{{range .items}}{{if eq .status.phase \"Running\"}}{{.spec.nodeName}}{{print \"\n\"}}{{end}}{{end}}")
POD_COUNT=$(echo "$NODES" | wc -l)
UNIQ_NODES=$(echo "$NODES" | sort | uniq | wc -l)
echo "$(datestamp) Check that Registry is scaled to 3: $POD_COUNT"
echo "$(datestamp) Check that Registry is scaled to all infra nodes: " $UNIQ_NODES
if [ "$POD_COUNT" -lt 3 ]
then
  echo "$(datestamp) ERROR: Registry pod count $POD_COUNT is less than 3"
elif [ "$UNIQ_NODES" -lt 3 ]
then
  echo "$(datestamp) ERROR: Registry on too few nodes " $NODES
fi

# Verify the Router is on 3 nodes
NODES=$(oc -n default get pods -l deploymentconfig=router -o yaml -o go-template="{{range .items}}{{if eq .status.phase \"Running\"}}{{.spec.nodeName}}{{print \"\n\"}}{{end}}{{end}}")
POD_COUNT=$(echo "$NODES" | wc -l)
UNIQ_NODES=$(echo "$NODES" | sort | uniq | wc -l)
echo "$(datestamp) Check that Router is scaled to 3: $POD_COUNT"
echo "$(datestamp) Check that Router is scaled to all infra nodes: " $UNIQ_NODES
if [ "$POD_COUNT" -lt 3 ]
then
  echo "$(datestamp) ERROR: Router pod count $POD_COUNT is less than 3"
elif [ "$UNIQ_NODES" -lt 3 ]
then
  echo "$(datestamp) ERROR: Router on too few nodes " $NODES
fi

# Verify the IP Failover is on 3 nodes
NODES=$(oc -n default get pods -l deploymentconfig=ipf-ha-router-kamloops -o yaml -o go-template="{{range .items}}{{if eq .status.phase \"Running\"}}{{.spec.nodeName}}{{print \"\n\"}}{{end}}{{end}}")
POD_COUNT=$(echo "$NODES" | wc -l)
UNIQ_NODES=$(echo "$NODES" | sort | uniq | wc -l)
echo "$(datestamp) Check that IPF is scaled to 3: $POD_COUNT"
echo "$(datestamp) Check that IPF is scaled to all infra nodes: " $UNIQ_NODES
if [ "$POD_COUNT" -lt 3 ]
then
  echo "$(datestamp) ERROR: IPF pod count $POD_COUNT is less than 3"
elif [ "$UNIQ_NODES" -lt 3 ]
then
  echo "$(datestamp) ERROR: IPF on too few nodes " $NODES
fi

# Check the clusters capacity
echo "$(datestamp) Check Cluster Capacity of region=app"
# Get all the nodes in region=app
# Format into a string with each node enclosed in quotes
NODE_LIST=$(oc get nodes -l region=app -o name | sed 's#nodes/##')
NODES=
for N in $NODE_LIST; do NODES="$NODES \"$N\""; done
# Get Node capacity
# node.dmz cpu_int mem_ki pods
NODE_CAP=$(oc get nodes -o go-template="{{range .items}}{{if  eq .metadata.name $NODES}}{{.metadata.name}}{{print \"\t\"}}{{.status.capacity.cpu}}{{print \"\t\"}}{{.status.capacity.memory}}{{print \"\t\"}}{{.status.capacity.pods}}{{print \"\n\"}}{{end}}{{end}}")
# CPU Capacity
CPU_CAP=$(echo "$NODE_CAP" | awk -F "\t" 'BEGIN { SUM=0 } {if ($2 ~ "m") SUM+=$2/1000; else SUM+=$2 } END {print SUM}')
# Memory Capacity in Gi
MEM_CAP=$(echo "$NODE_CAP" | awk -F "\t" 'BEGIN { SUM=0 } {if ($3 ~ "Gi") $3=$3*1024"Mi"; if ($3 ~ "G") $3=$3*1000"M"; if ($3 ~ "Mi") $3=$3*1024"Ki"; if ($3 ~ "M") $3=$3*1000"K"; if ($3 ~ "Ki") $3=$3*1024; if ($3 ~ "K") $3=$3*1000; SUM+=$3} END { print SUM/1024/1024/1024"Gi"}')
# Pod Capacity
POD_CAP=$(echo "$NODE_CAP" | awk -F "\t" 'BEGIN { SUM=0 } {SUM+=$4 } END {print SUM}')
# Get stats for running pods
PODS=$(oc get pods --all-namespaces -o go-template="{{range .items}}{{if .spec.nodeName}}{{if and (not (eq .status.phase \"Failed\" \"Succeeded\")) (eq .spec.nodeName $NODES)}}{{range .spec.containers}}{{.name}}{{print \"\t\"}}{{.resources.requests.cpu}}{{print \"\t\"}}{{.resources.requests.memory}}{{print \"\n\"}}{{end}}{{end}}{{end}}{{end}}")
# CPU Requests
CPU_REQ=$(echo "$PODS" | awk -F "\t" 'BEGIN { SUM=0 } {if ($2 ~ "m") SUM+=$2/1000; else SUM+=$2 } END {print SUM}')
# Memory Requests in Gi
MEM_REQ=$(echo "$PODS" | awk -F "\t" 'BEGIN { SUM=0 } {if ($3 ~ "Gi") $3=$3*1024"Mi"; if ($3 ~ "G") $3=$3*1000"M"; if ($3 ~ "Mi") $3=$3*1024"Ki"; if ($3 ~ "M") $3=$3*1000"K"; if ($3 ~ "Ki") $3=$3*1024; if ($3 ~ "K") $3=$3*1000; SUM+=$3} END { print SUM/1024/1024/1024"Gi"}')
# Pods Running
POD_REQ=$(echo "$PODS" | wc -l)
# Print CPU
CPU_PERCENT=$(echo "$CPU_REQ / $CPU_CAP * 100" | bc -l | awk '{printf "%.2f",$0}')
echo "$(datestamp) CPU Capacity: $CPU_REQ / $CPU_CAP = ${CPU_PERCENT}%"
CPU_PERCENT=$(echo "$CPU_PERCENT" | awk '{printf "%.f",$0}')
if [ "$CPU_PERCENT" -gt 85 ]
then
  echo "$(datestamp) ERROR: Cluster low on CPU capacity"
fi
# Print Memory
MEM_PERCENT=$(echo "$MEM_REQ / $MEM_CAP * 100" | sed 's#Gi##g' | bc -l | awk '{printf "%.2f",$0}')
echo "$(datestamp) Memory Capacity: $MEM_REQ / $MEM_CAP = ${MEM_PERCENT}%"
MEM_PERCENT=$(echo "$MEM_PERCENT" | awk '{printf "%.f",$0}')
if [ "$MEM_PERCENT" -gt 85 ]
then
  echo "$(datestamp) ERROR: Cluster low on Memory capacity"
fi
# Print Pods
POD_PERCENT=$(echo "$POD_REQ / $POD_CAP * 100" | bc -l | awk '{printf "%.2f",$0}')
echo "$(datestamp) Pod Capacity: $POD_REQ / $POD_CAP = ${POD_PERCENT}%"
POD_PERCENT=$(echo "$POD_PERCENT" | awk '{printf "%.f",$0}')
if [ "$POD_PERCENT" -gt 85 ]
then
  echo "$(datestamp) ERROR: Cluster low on Pod capacity"
fi
{% endraw %}
{% endif %}

{% if ansible_fqdn in groups['master'] %}
{% raw %}
# Verify ETCD is running
echo -n "$(datestamp) ETCD Deamon Status: "
if ! systemctl is-active etcd.service
then
  echo "$(datestamp) ERROR: ETCD is not running"
fi

# Verify API service is running
echo -n "$(datestamp) OpenShift API Deamon Status: "
if ! systemctl is-active atomic-openshift-master-api.service
then
  echo "$(datestamp) ERROR: OpenShift API is not running"
fi

# Verify Controller service is running
echo -n "$(datestamp) OpenShift Controller Deamon Status: "
if ! systemctl is-active atomic-openshift-master-controllers.service
then
  echo "$(datestamp) ERROR: OpenShift Controller is not running"
fi
{% endraw %}
{% endif %}

{% if ansible_fqdn in groups['storage'] %}
{% raw %}
{% endraw %}
{% endif %}

# Checks for all nodes

# Check Docekr is running
echo -n "$(datestamp) Docker Deamon Status: "
if ! systemctl is-active docker.service
then
  echo "$(datestamp) ERROR: Docker is not running"
  # Other checks depend on Docker running, exit out
  exit 1
fi

# Check Docker Data usage
echo -n "$(datestamp) Docker Data Space is: "
SPACE=$(echo $(echo \"$(docker info 2>/dev/null | awk '/Data Space Available/ {print $4}') / $(docker info 2>/dev/null | awk '/Data Space Total/ {print $4}')\" | bc -l))
echo "$SPACE = $(echo $SPACE '*' 100 | bc -l | awk '{printf "%.2f",$0}')% free"
FREE=$(echo $SPACE '>' 0.15 | bc -l)
if [ "$FREE" -lt 1 ]
then
  echo "$(datestamp) ERROR: Low Docker Data Space"
fi

# Check Docker Metadata Usage
echo -n "$(datestamp) Docker Metadata Space is: "
SPACE=$(echo $(echo \"$(docker info 2>/dev/null | awk '/Metadata Space Available/ {print $4}') / $(docker info 2>/dev/null | awk '/Metadata Space Total/ {print $4}')\" | bc -l))
echo "$SPACE = $(echo $SPACE '*' 100 | bc -l | awk '{printf "%.2f",$0}')% free"
FREE=$(echo $SPACE '>' 0.15 | bc -l)
if [ "$FREE" -lt 1 ]
then
  echo "$(datestamp) ERROR: Low Docker Metadata Space"
fi

# Check for local volume count
# May fail on masters that have zero, so ||true
VOLS=$(mount|grep -c openshift.local.volumes||true)
echo "$(datestamp) Pod volumes: $VOLS"
if [ "$VOLS" -gt "1000" ]
then
  echo "$(datestamp) ERROR: Too many volumes"
fi

# Check Node service
echo -n "$(datestamp) OpenShift Node Deamon Status: "
if ! systemctl is-active atomic-openshift-node.service
then
  echo "$(datestamp) ERROR: OpenShift Node is not running"
fi

# Check OpenVSwitch service
echo -n "$(datestamp) OpenVSwitch Deamon Status: "
if ! systemctl is-active openvswitch.service
then
  echo "$(datestamp) ERROR: OpenVSwitch is not running"
fi

# Test that the API is responding
echo -n "$(datestamp) OpenShift API Status: "
if ! curl -s https://console.pathfinder.gov.bc.ca:8443/healthz | grep ok
then
  echo "$(datestamp) ERROR: curl of API https://console.pathfinder.gov.bc.ca:8443/healthz failed"
fi

