#!/usr/bin/env bash

# Exit on error. Append "|| true" if you expect an error.
set -o errexit
# Exit on error inside any functions or subshells.
set -o errtrace
# Do not allow use of undefined vars. Use ${VAR:-} to use an undefined VAR
set -o nounset
# Catch the error in case mysqldump fails (but gzip succeeds) in `mysqldump |gzip`
set -o pipefail
# Turn on traces, useful while debugging but commented out by default
# set -o xtrace

# Global variables re-used through the script.
MAILTO="William.Hutchison@dxcas.com Steven.Barre@dxcas.com"
MAILFROM="-r hslinuxteam@dxcas.com"

# Define global variable representing the text to display in the email subject for environment.
EMAIL_ENV="{{ email_env }}"

# Get all cronjobs
for CRON_JOB in $(oc -n advsol-ops get cronjob -o=custom-columns=NAME:.metadata.name --no-headers)
do
  # Get the most recent job and its failed status, will either return 1 or blank
  JOBS=$(oc -n advsol-ops get job -l cronjob="${CRON_JOB}" -o jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.status.startTime}{"\t"}{.status.failed}{"\n"}{end}' | sort -rk2)
  JOB_STATUS=$(echo "${JOBS}" | head -1 | cut -d$'\t' -f 3)
  if [[ "${JOB_STATUS}" -eq "1" ]]
  then
    echo "${JOBS}" | mail -s "${EMAIL_ENV} ERROR - Cron job ${CRON_JOB} failed!!" $MAILFROM $MAILTO
  fi
done

